name: "Google Chat Notify"
author: "shreyngd"
description: "Send build/deploy notifications to Google Chat with status, branch, actor, commits, and failure reason."
branding:
  icon: "message-square"
  color: "blue"

inputs:
  webhook-url:
    description: "Google Chat Incoming Webhook URL"
    required: true

runs:
  using: "composite"
  steps:
    - name: Collect commits
      id: commits
      shell: bash
      run: |
        echo "list<<EOF" >> $GITHUB_OUTPUT

        COMMITS_JSON='${{ toJson(github.event.commits) }}'

        if [ "$COMMITS_JSON" = "null" ] || [ "$COMMITS_JSON" = "[]" ]; then
          echo "_No commits found for this push event._" >> $GITHUB_OUTPUT
        else
          for commit in $(jq -r '.[] | @base64' <<< "$COMMITS_JSON"); do
            _jq() { echo "$commit" | base64 --decode | jq -r "$1"; }
            SHA=$(_jq '.id' | cut -c1-7)
            MESSAGE=$(_jq '.message' | head -c 80)
            AUTHOR=$(_jq '.author.name')
            echo "- [${SHA}](https://github.com/${{ github.repository }}/commit/${SHA}): ${MESSAGE} (by ${AUTHOR})" >> $GITHUB_OUTPUT
          done
        fi

        echo "EOF" >> $GITHUB_OUTPUT

    - name: Capture failure reason
      if: failure()
      id: failure-reason
      shell: bash
      run: |
        echo "reason=Job ${{ github.job }} failed — check logs" >> $GITHUB_OUTPUT

    - name: Send notification to Google Chat
      if: always()
      shell: bash
      run: |
        STATUS="✅ Success"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS="❌ Failed"
        fi

        COMMITS_JSON=$(echo "${{ steps.commits.outputs.list }}" | jq -Rs .)
        FAILURE_REASON="${{ steps.failure-reason.outputs.reason }}"
        LOGS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        # Build commits section
        COMMITS_SECTION=""
        if [ -n "$COMMITS_JSON" ]; then
          COMMITS_SECTION=$(cat <<'COMMITS'
          ,
          {
            "header": "Commits in this push",
            "widgets": [
              {
                "textParagraph": {
                  "text": $COMMITS_JSON
                }
              }
            ]
          }
COMMITS
          )
        fi

        # Build failure section
        FAILURE_SECTION=""
        if [ "${{ job.status }}" != "success" ] && [ -n "$FAILURE_REASON" ]; then
          FAILURE_SECTION=$(cat <<'FAILURE'
          ,
          {
            "header": "Failure Reason",
            "widgets": [
              {
                "textParagraph": {
                  "text": "$FAILURE_REASON"
                }
              },
              {
                "buttonList": {
                  "buttons": [
                    {
                      "text": "View Logs",
                      "onClick": {
                        "openLink": {
                          "url": "$LOGS_URL"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
FAILURE
          )
        fi

        # Build final payload
        PAYLOAD=$(cat <<'EOF'
        {
          "cardsV2": [
            {
              "cardId": "build-status",
              "card": {
                "header": {
                  "title": "GitHub Build Notification",
                  "subtitle": "${{ github.repository }}",
                  "imageUrl": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "imageType": "CIRCLE"
                },
                "sections": [
                  {
                    "header": "Build Details",
                    "widgets": [
                      {
                        "keyValue": {
                          "topLabel": "Branch",
                          "content": "${{ github.ref_name }}"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Triggered by",
                          "content": "${{ github.actor }}"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Status",
                          "content": "${STATUS}"
                        }
                      }
                    ]
                  }
                  $COMMITS_SECTION
                  $FAILURE_SECTION
                ]
              }
            }
          ]
        }
EOF
        )

        # Send to Google Chat
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "${PAYLOAD}" \
          "${{ inputs.webhook-url }}"
